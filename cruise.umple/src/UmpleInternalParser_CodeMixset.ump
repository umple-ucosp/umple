/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This file analyze core umple meta model tokens such as which language to generate,
the current namespace, etc and populates the umple meta model.

Please refer to UmpleInternalParser.ump for more details.

*/


namespace cruise.umple.compiler;

class UmpleModel{
  depend java.util.stream.*;

/*
 * returns a mixset from UmpleModel based on its name.
 * @Abdulaziz   
 */
	Mixset getMixset(String name) {
		/*Mixset mixset = null;
		for(MixsetOrFile mOrF : getMixsetOrFiles())
		{
			if (mOrF.getName().equals(name) && (mOrF instanceof Mixset))
				mixset = (Mixset)mOrF;
		}
		return mixset;*/
		
		Mixset mixset = null;
		for(MixsetOrFile mOrF : getMixsetsOrFiles(name))
		{
			if (mOrF instanceof Mixset)
				mixset = (Mixset)mOrF;
		}
		return mixset;
	}
/*
 * returns UmpleFile from UmpleModel based on its name. 
 * usage: to know if the file in which a mixset is mentioned was already used before. 
 * @Abdulaziz   
 */	
	UmpleFile getUmpleFile(String name) {
		
		UmpleFile uFile = null;
		for(MixsetOrFile mOrF : getMixsetsOrFiles(name))
		{
			if (mOrF instanceof UmpleFile)
				uFile = (UmpleFile)mOrF;
		}
		return uFile;
	}
	
	 List<MixsetOrFile> getMixsetsOrFiles(String name) {
	 
	 	return mixsetOrFiles.stream().filter(mOrF -> mOrF.getName().equals(name)).collect(Collectors.toList());
		 		
	}
	
}

class UmpleInternalParser
{
	depend cruise.umple.compiler.UmpleFile;
	depend java.lang.StackTraceElement;
	depend java.lang.Thread;
	 
 // prepare mixsets that are inside an Umple class
  private void analyzeMixsetDefinition(Token aToken , String className)
  {
  	aToken.addSubToken(new Token("entityName",className) );
	aToken.addSubToken(new Token("entityType","class") );
	System.out.println("print the token: "+ aToken );
	analyzeMixset(aToken);
		
	
	}

 private void analyzeMixsetToken(Token t, int analysisStep)
  {
   if (analysisStep != 2)
    {
      shouldProcessAgain = shouldProcessAgain || (analysisStep == 1);
      return;
    }
    
        
    if (t.is("mixsetDefinition"))
    {
      analyzeMixset(t);
    }
    
  }
  
  
  private Mixset analyzeMixset(Token token)
  {
/*
 * print java call stack.
   
  for (StackTraceElement ste : Thread.currentThread().getStackTrace()) {
    System.out.println(ste);
}
*/
  	String mixsetName = token.getValue("mixsetName");
  	
    // check if the mixset is was not added before
    Mixset mixset = model.getMixset(mixsetName);
    if(mixset  == null)
	{
		//long count  = model.getMixsetOrFiles().stream().filter(m-> m.getName().equals(mixsetName)).count(); 
		mixset  = new Mixset(mixsetName);
		model.addMixsetOrFile(mixset);
	}
	
	String mixsetBody = token.getValue("extraCode");	
	
	//inline mixset def.
	String entityType = token.getValue("entityType");
	String entityName = token.getValue("entityName");
	
	// mixset with one element
	String oneElementMixset = token.getValue("oneElement");
	
	if(entityType != null) {
		if (oneElementMixset != null)
		{
			mixsetBody = entityType + " "+entityName + " { "+ oneElementMixset + " }";
		}
		else
			mixsetBody = entityType + " "+entityName + " { "+ mixsetBody + " }";	
		}
	else 
		if (oneElementMixset != null) mixsetBody = oneElementMixset;
	
/*	
		START -- UNDER DEVELOPMENT
		
		 public  UmpleFile(String aPath, String aFilename){
    this(new File(aPath,aFilename));
  }

  // line 22 "../../../../src/UmpleHelper_Code.ump"
   public  UmpleFile(String aFullFilename){
		
*/	

	Position thePosition = token.getPosition();
    Position endPosition = token.getEndPosition();
    
    String path = null;
     if( thePosition.getFilename() == null ){
        path = "";
     }
     else{
        path = Paths.get(thePosition.getFilename()).getFileName().toString();
      }
      
    System.out.println("path : "+path  
    + ", Start #: "+ thePosition.getLineNumber()
    +", End# "+endPosition.getLineNumber()
    
    );
	String fileName = token.getPosition().getFilename();

	UmpleFile uFile = null; // new UmpleFile(File);	
	System.out.println(" Token Position: "+token.getPosition() +
	" end "+token.getEndPosition() + ", "+ token.getEndPosition().getFilename() + ","+
	 " FILE NAME >>  " + token.getPosition().getFilename());
	
	int lineNumber = thePosition.getLineNumber();
	MixsetFragment mixsetFragment = new MixsetFragment(uFile, lineNumber, mixsetBody);
	mixset.addWaitingFragment(mixsetFragment);
	
	
	
   //System.out.println("FullFileAddress: "+ data.getFullFileAddress()+", file Name: "+data.getFilename()+", Position : "+data.getPosition());  
   System.out.println("  ---- ----  Start Mixset Parsing ---- ----");
   System.out.println("MIXSET ::: "+  mixset  + " \n Mixset Body  :"+mixsetBody);
   System.out.println("  ---- ----  End Mixset Parsing ---- ----");
   System.out.println("\n\n");
   
   /*
		END -- UNDER DEVELOPMENT
		
		
	*/	
   return  mixset ;
  
  }
  
  
  

  
}

