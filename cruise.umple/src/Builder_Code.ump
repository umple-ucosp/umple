namespace cruise.umple.builder;

external Object {}
external ClassLoader {}

class Command 
{
  depend  java.util.regex.*;  
  depend  java.lang.reflect.*;

  const String NL = System.lineSeparator();

  String[] history;
  String[] messages;
  String[] attributes;
  Object currentObject = null;
  ClassLoader loader;

  public void addAttributes(String input)
  {
    if (input == null)
    {
      return;
    }
    boolean isFirst = true;
    for(String d : input.split(","))
    {
      if (isFirst)
      {
        isFirst = false;
        continue;
      }
      addAttribute(d.trim());
    }    
  }

  public String[] popMessages()
  {
    String[] local = getMessages();
    messages = new ArrayList<String>();
    return local;
  }

  public Object exec(String rawInput)
  {
    addHistory(rawInput);
    
    String input = "";
    ArrayList<String> assertions = new ArrayList<String>();
    for(String d : rawInput.split(","))
    {
      if (input.isEmpty())
      {
        input = d;
      }
      else
      {
        assertions.add(d);
      }
    }
    
    Matcher newObjectMatch = Pattern.compile("new\\s([^\\s]*)").matcher(input);
    Matcher showMatch = Pattern.compile("show\\s([^\\s]*)").matcher(input);
    Object answer = null;
    if (newObjectMatch.matches())
    {
      answer = newObject(newObjectMatch.group(1));
    }
    else if (showMatch.matches())
    {
      answer = showResults(showMatch.group(1));
    }
    else
    {
      runMethod(input);
    }
    
    for(int i=0; i<attributes.size(); i++)
    {
      if (i == assertions.size())
      {
        break;
      }
      String methodName = attributes.get(i);
      String expectedValue = assertions.get(i);
      assertMethod(methodName,expectedValue);
    }
    return answer;
  }

  public Object newObject(String className)
  {
    currentObject = null;
    try 
    {
      Class<? extends Object> classDefinition = Class.forName(className,true,loader);
      currentObject = classDefinition.newInstance();
    }
    catch (Throwable e) {
    }
    
    if (currentObject != null)
    {
      addMessage("Created " + className);
    }
    else
    {
      addMessage("Unable to create " + className);
    }
    
    return currentObject;
  }
  
  public void runMethod(String methodName)
  {
    callMethod(methodName,false,true);
  }
  
  public Object showResults(String methodName)
  {
    return callMethod(methodName,true,false);
  }
  
  public boolean assertMethod(String methodName, String rawExpectedValue)
  {
    String expectedValue = rawExpectedValue.trim();
    
    if (expectedValue.equals(""))
    {
      return true;
    }
        
    Object result = callMethod(methodName,false,false);
    
    boolean isNull = result == null;
    boolean isNullButEqual = expectedValue.equals("NULL") && isNull;
    boolean isEqual = !isNull && expectedValue.equals(result.toString());
    
    if (isNullButEqual || isEqual)
    {
      showValue(methodName,result);
      return true;
    }
    else
    {
      String actualValue = isNull ? "[NULL]" : result.toString();
      addMessage("!!! ASSERTION FAILED on "+ methodName +", EXPECTED "+ expectedValue +", ACTUAL " + actualValue);
      return false;
    }
  }
  
  private Object callMethod(String methodName, boolean showValue, boolean showExecuted)
  {
    try 
    {
      Class<? extends Object> c = currentObject.getClass();
      Method m = c.getMethod(methodName);
      Object answer = m.invoke(currentObject);

      if (showExecuted)
      {
        addMessage("Executed #" + methodName);  
      }
      
      if (showValue)
      {
        showValue(methodName,answer);
      }
      return answer;
    }
    catch (Throwable e) {
      addMessage("Unable to execute #" + methodName);  
      return null;
    }
  }
  
  private void showValue(String methodName, Object answer)
  {
    if (answer == null)
    {
      addMessage(methodName + " = [NULL]");
    }
    else
    {
      addMessage(methodName + " = " + answer.toString());  
    }
  }
  
}

class Builder {

  depend java.io.*;
  depend java.nio.*;
  depend java.nio.file.*;
  depend java.nio.file.attribute.*;

  depend java.net.*;
  depend org.apache.tools.ant.*;
  depend java.util.*;
  depend java.util.regex.*;
  depend java.util.stream.*;

  const String NL = System.lineSeparator();
  const Pattern ANT_EXEC_PATTERN = Pattern.compile("ant" + (System.getProperty("os.name").toLowerCase().contains("windows") ? "(?:\\.(?:bat|exe))?" : ""));
  
  const String ANT_EXEC = findAntExec();  

  /**
   * Finds the `ant` executable within @link{ProcessBuilder::environment()}. 
   * @return String name of path
   * @throws IllegalStateException if the PATH is empty or `ant` can not be found.
   */
  private static String findAntExec() {
    final String pathStr = System.getenv("PATH");
    if (pathStr == null || pathStr.isEmpty()) {
      throw new IllegalStateException("System's PATH variable is empty or null.");
    }

    // Traverse all of the PATH directories, looking for the ANT executable
    List<Path> paths = Arrays.asList(pathStr.split(File.pathSeparator)).stream()
      .map(File::new)
      .filter(f -> (f.exists() && f.canRead())) // might be dead path entries :O
      .map(f -> f.toPath())
      .map(source -> {
        PathExecFileVisitor v = new PathExecFileVisitor(source, ANT_EXEC_PATTERN);

        try {

          Files.walkFileTree(source, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, v);
        } catch (AccessDeniedException ade) {
          // ignore, v.path() will return Optional::none
          // This happens if you try to read system32 on windows for example
        } catch (IOException ioe) { 
          // this should never happen, but bail out if it does.
          throw new IllegalStateException(ioe); 
        }
        return v.path();
      })
      .filter(Optional::isPresent)
      .map(Optional::get) // flat map it to a list of Path
      .collect(Collectors.toList()); 

    if (paths.size() > 0) {
      // we found it.. thank god.
      return paths.get(0).getFileName().toString();
    }

    throw new IllegalStateException("Could not find Ant executable on PATH (pattern: " + ANT_EXEC_PATTERN + ")");
  }
  
  public URL compile(String directory, String jarname, String projectName, String javaTarget) {

    String buildfile = createAntFile(directory, "build-"+ projectName +".xml", jarname, javaTarget);
    if (buildfile == null) {
      return null;
    }
    
    try {
      runAnt(buildfile);
      File jarfile = new File(directory + "//" + jarname) ;
      return jarfile.exists() ? new URL("jar:file:///" + jarfile.getAbsolutePath() + "!/") : null;
    } catch (MalformedURLException e) {
      return null;
    } catch (BuildException e2) {
      return null;
    }
  }
  
  public void load(String directory, String jarname) {
    try {
      //String jarfile = "jar:file:///" + new File(directory).getAbsolutePath() + "/"+ jarname +"!/";
      DynamicClassPathLoader.addJar(directory, jarname);
    } catch (IOException e) {
      throw new RuntimeException("Unable to load application jar",e);
    }
  }
  
  public boolean runAnt(String buildFilename) {
    return runAnt(buildFilename, "", Collections.<String, String>emptyMap());
  }

  public boolean runAnt(String buildFilename, final String target) {
    return runAnt(buildFilename, target, Collections.<String, String>emptyMap());
  }

  public boolean runAnt(String buildFilename, final String target, final Map<String, String> options) {
    // build string parameters:
    final String buildFilePath = (new File(buildFilename)).getAbsolutePath();
    String optionStr = "";
    if (options != null) {
      final List<String> optionList = new ArrayList<>(options.size() * 20);
      for (Map.Entry<String, String> e : options.entrySet()) {
        optionList.add("-D" + e.getKey().trim() + (e.getValue().trim().length() > 0 ? "=" + e.getValue().trim() : ""));
      }
      
      optionStr = String.join(" ", optionList);
    }

    Process p = null;
    try
    {
      ProcessBuilder pb = new ProcessBuilder();

      List<String> cmd = Arrays.asList(ANT_EXEC, "-f", buildFilePath, optionStr);
      // remove empty parameters
      cmd = cmd.stream().map(String::trim).filter(s -> !s.isEmpty()).collect(Collectors.toList());
      pb.command(cmd);
      
      p = pb.start();
      p.waitFor();

      if (p.exitValue() != 0) {
        try (BufferedReader out = new BufferedReader(new InputStreamReader(p.getInputStream()));
             BufferedReader err = new BufferedReader(new InputStreamReader(p.getErrorStream()))) {
          final StringBuilder outSB = new StringBuilder();
          
          String line;
          while ((line = out.readLine()) != null) {
            outSB.append(line);
            outSB.append(NL);
          }

          final StringBuilder errSB = new StringBuilder();
          while ((line = err.readLine()) != null) {
            errSB.append(line);
            errSB.append(NL);
          }

          System.out.println("== Ant Task failed ==");
          System.out.println("System.out => " + NL + outSB);
          System.err.println("System.err => " + NL + errSB);
        }
        
      return false;
    }

      return true;  
    } catch (IOException | InterruptedException e) {
      System.err.println("Failed to run Ant: " + e.getMessage());
      return false;
    } finally {
      if (p != null) p.destroy();
    }
  }
  
  public void runAntOLD(String buildFilename)
  {
    File buildFile = new File(buildFilename);
    Project p = new Project();
    p.setUserProperty("ant.file", buildFile.getAbsolutePath());
    p.init();
    ProjectHelper helper = ProjectHelper.getProjectHelper();
    p.addReference("ant.projectHelper", helper);
    helper.parse(p, buildFile);
    p.executeTarget(p.getDefaultTarget());    
  }
  
  private String createAntFile(String baseDirectory, String buildname, String jarname, String javaTarget)
  {
    
    String antScript = "" +
      "<project name=\"runtime-compiler\" default=\"go\" basedir=\".\">" + NL +
      "  <target name=\"clean\">" + NL +
      "    <delete file=\""+ jarname +"\" failonerror=\"false\" />" + NL +
      "    <delete failonerror=\"false\">" + NL +
      "        <fileset dir=\".\" includes=\"**/*.class\"/>" + NL +
      "      </delete>" + NL +
      "  </target>" + NL +
      "  <target name=\"compile\">" + NL +
      "    <javac debug=\"true\" debuglevel=\"source,lines,vars\" includeAntRuntime=\"false\" destdir=\".\" srcdir=\".\" target=\""+ javaTarget +"\">" + NL +
      "      <exclude name=\"**/.svn\"/>" + NL +
      "    </javac>" + NL +
      "  </target>" + NL +
      "  <target name=\"jar\">" + NL +
      "    <jar destfile=\""+ jarname +"\" basedir=\".\" excludes=\"**/.svn\" />" + NL +
      "  </target>" + NL +
      "  <target name=\"go\" depends=\"clean,compile,jar\" />" + NL +       
      "</project>";
    
    try {
      String buildfile = baseDirectory + "/" + buildname;
      BufferedWriter out = new BufferedWriter(new FileWriter(buildfile));
      out.write(antScript);
      out.close();
      return buildfile;
    } 
    catch (IOException e) 
    {
      return null;
    }
  }
  
  private static class PathExecFileVisitor extends SimpleFileVisitor<Path> {

    final Path source;
    final Pattern searchPattern;

    private Optional<Path> matched = Optional.empty();

    public PathExecFileVisitor(final Path source, final Pattern searchPattern) {
      this.source = source;
      this.searchPattern = searchPattern;
    }

    /** 
     * Was the path pattern found
     * @return `true` if found
     */
    public Optional<Path> path() {
      return matched;
    }

    @Override 
    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
      final File fdir = dir.toFile();
      if (!dir.equals(source) && (!fdir.exists() || !fdir.canRead())) {
        // Skip all directories, PATH doesn't care about subtrees
        return FileVisitResult.SKIP_SUBTREE; 
      }

      return FileVisitResult.CONTINUE;
    }

    @Override
    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
       throws IOException
    {
      final Matcher m = searchPattern.matcher(file.getFileName().toString());
      if (m.matches()) {
        matched = Optional.of(file);
        return FileVisitResult.TERMINATE;
      }

      return FileVisitResult.CONTINUE;
    }
  }
}


class DynamicClassPathLoader
{
  depend java.io.*;
  depend java.lang.reflect.*;
  depend java.net.*;
  depend java.net.*;
  
  private static final Class<?>[] parameters = new Class[]{URL.class};

  public static void addJar(String baseDirectory, String jarname) throws IOException
  {
    URL url = new URL("jar:file:///" + new File(baseDirectory).getAbsolutePath() + "/"+ jarname +"!/");
    DynamicClassPathLoader.addURL(url);
  }
  
  public static void addURL(URL url) throws IOException
  {
    URLClassLoader sysloader = (URLClassLoader)ClassLoader.getSystemClassLoader();
    Class<?> sysclass = URLClassLoader.class;

    try
    {
      Method method = sysclass.getDeclaredMethod("addURL",parameters);
      method.setAccessible(true);
      method.invoke(sysloader,new Object[]{ url });
    }
    catch (Exception e)
    {
      throw new RuntimeException("Error, could not add URL to system classloader",e);
    }
  }

}

