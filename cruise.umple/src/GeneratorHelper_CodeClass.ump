/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This class provides helper methods of class related code generation.

Please refer to GeneratorHelper_Code.ump for more details.

*/

namespace cruise.umple.compiler;

class GeneratorHelper
{

  // Remove all internally added classes
  public static void postpareClass(UmpleModel model)
  {
    int maxIndex = model.numberOfUmpleClasses() - 1;
    for (int i=maxIndex; i>=0; i--)
    {
      UmpleClass c = model.getUmpleClass(i);
      if (c.getIsInternal())
      {
        model.removeUmpleClass(c);
      }
    }
  }
  
  // Remove all internally added attributes / associations of a class
  private static void postpareClass(UmpleClass aClass)
  {
    int maxIndex = aClass.numberOfCodeInjections() - 1;
    for (int i=maxIndex; i>=0; i--)
    {
      CodeInjection ci = aClass.getCodeInjection(i);
      if (ci.getIsInternal())
      {
        aClass.removeCodeInjection(ci);
      }
    }
    
    maxIndex = aClass.numberOfDepends() - 1;
    for (int i=maxIndex; i>=0; i--)
    {
      Depend d = aClass.getDepend(i);
      if (d.getIsInternal())
      {
        aClass.removeDepend(d);
      }      
    }  
  }  
  
  public static String toCode(List<CodeInjection> allCodeInjections)
  {
    String asCode = null;
    String positionString = "";
    if (allCodeInjections != null)
    {
      for (CodeInjection inject : allCodeInjections)
      {
        if (asCode == null)
        {
          if(inject.getConstraintTree()!=null&&generator!=null)
          {
            asCode = inject.getConstraintCode(generator);
          }
          else asCode = inject.getCode();
           
          Position p = inject.getPosition();
	      if (p != null) {
	          positionString =  "// line " + p.getLineNumber() + " \"" + ParserUtil.getRelativePath(p,(UmpleClass)(inject.getUmpleClassifier()), ((UmpleClass)inject.getUmpleClassifier()).getSourceModel().getDefaultGenerate() ) + "\"\n";
	      }
        }
        else
        {
          if(inject.getConstraintTree()!=null&&generator!=null)
          {
            asCode = StringFormatter.format("{0}\n{1}",asCode,inject.getConstraintCode(generator));
          }
          else asCode = StringFormatter.format("{0}\n{1}",asCode,inject.getCode());
        }
      }
    }
    if (asCode == null)
    {
      return null;
    }
    return positionString + asCode;
  }  

  public static String doIndent(String code, String indents)
  {
    StringBuilder builder = new StringBuilder(code.length() + indents.length()); //Assume generally only one line, will expand otherwise
    builder.append(indents); //Indent first line
    for (int i = 0; i < code.length(); i++)
    {
      builder.append(code.charAt(i));
      if (code.charAt(i) == '\n')
      {
        builder.append(indents);
      }
    }
    return builder.toString();
  }

}

