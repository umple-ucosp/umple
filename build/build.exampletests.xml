<?xml version="1.0" encoding="UTF-8"?>
<project basedir=".." default="build" name="UmpleCore" >

  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <property name="myenv" value="cc" />

  <property name="project.output.path" value="temp" />
  <property name="java.path" value="${project.output.path}/java" />
  <property name="cpp.path" value="${project.output.path}/cpp" />
  <property name="php.path" value="${project.output.path}/php" />
  <property name="ruby.path" value="${project.output.path}/ruby" />

  <property name="manualumpfiles.path" value="umpleonline/ump/manualexamples" />
  <property name="exampleumpfiles.path" value="umpleonline/ump" />

  <import file="_${myenv}.xml" />
  <import file="_template.xml" />

  <!-- options -->
  <property name="logfile" value="UserManualAndExampleTests_output.txt" />
  <property name="examplepattern" value="*" />
  <property name="failfast" value="true" />
  <property name="threadcount" value="4"/>
  <property name="cleanonfinish" value="true" />

  <!-- Entry points -->

  <target name="allUserManualAndExampleTests" depends="startLog,deleteTempFolders,testSetup,checkRuby">
    <echo>Building User Manual and UmpleOnline Examples</echo>
    <echo>See ${fulllogfile} for build results</echo>

    <!-- Forces ruby to be skipped unless allowruby is set to true 
    on the command line or in the ruby-specific target -->
    <property name="allowruby" value="false" />

    <trycatch>
      <try>
        <antcall target="doJava" />
        <!--<antcall target="doCpp" />-->
        <antcall target="doPhp" />
        <antcall target="doRuby" />
      </try>
      
      <finally>
        <antcall target="finishLog" />
        <if>
          <equals arg1="${cleanonfinish}" arg2="true" />
          <then>
            <antcall target="deleteTempFolders" />
          </then>
        </if>
        <echo>See build/${logfile} for build results</echo>
      </finally>
    </trycatch>
  </target>

  <target name="javaUserManualAndExampleTests">
    <property name="mode.notcpp" value="true" />
    <property name="mode.notphp" value="true" />
    <property name="mode.notruby" value="true" />

    <antcall target="allUserManualAndExampleTests" />
  </target>

  <target name="cppUserManualAndExampleTests">
    <property name="mode.notjava" value="true" />
    <property name="mode.notphp" value="true" />
    <property name="mode.notruby" value="true" />

    <antcall target="allUserManualAndExampleTests" />
  </target>

  <target name="phpUserManualAndExampleTests">
    <property name="mode.notjava" value="true" />
    <property name="mode.notcpp" value="true" />
    <property name="mode.notruby" value="true" />

    <antcall target="allUserManualAndExampleTests" />
  </target>

  <target name="rubyUserManualAndExampleTests">
    <property name="allowruby" value="true"/>
    <property name="mode.notjava" value="true" />
    <property name="mode.notcpp" value="true" />
    <property name="mode.notphp" value="true" />

    <antcall target="allUserManualAndExampleTests" />
  </target>

  <!-- Targets to generate and compile java-->

  <target name="doJava" unless="mode.notjava">
    <echo>Generating and compiling Java</echo>

    <fileset dir="${java.path}" includes="*.ump" id="java.ump.files">
      <!-- Special cases - temporary until error detection-->
      <exclude name="E0*.ump" />
      <exclude name="E1*.ump" />
      <exclude name="E2*.ump" />
      <exclude name="WE1xxIdentifierInvalid1.ump" />
      <exclude name="WE1xxIdentifierInvalid3.ump" />
      <exclude name="WE1xxIdentifierInvalid5.ump" />
      <exclude name="WE1xxIdentifierInvalid6.ump" />
      <exclude name="WE1xxIdentifierInvalid7.ump" />
      <!-- This fails to compile because they are incomplete examples of umple -->
      <exclude name="UseStatements1.ump" />
    </fileset>  

    <pathconvert pathsep="," property="java.ump.file.list" refid="java.ump.files"/>

    <echo>@@@PUT JAVA OUTPUTS HERE@@@</echo>
    <record name="${fulllogfile}" action="stop" />

    <for list="${java.ump.file.list}" delimiter="," param="umpFile" parallel="true" threadCount="${threadcount}" keepgoing="${failsafe}">
      <sequential>
        <ant antfile="${ant.file}" output="@{umpFile}.output" target="generateAndCompileJava">
          <property name="manualFile" value="@{umpFile}" />
        </ant> 
      </sequential>
    </for>

    <record name="${fulllogfile}" action="start" />
  </target>

  <target name="generateAndCompileJava">
    <sequential>
      <basename file="${manualFile}" property="manualfileshort" suffix="ump" />
      <property name="fullump" value="${java.path}/${manualfileshort}.ump" />
      <var name="okToCompileJava" value="true" />

      <echo>Will test ${manualfileshort}.ump </echo>
      
      <!-- Compile in umple to Java -->
      <trycatch>
        <try>
          <java jar="${dist.dir}/${dist.umple.jar}" fork="true" failonerror="true" dir="${java.path}">
            <arg value="-g" />
            <arg value="Java" />
            <arg value="--path" />
            <arg value="src-gen-umple/${manualfileshort}" />
            <arg value="${manualfileshort}.ump" />
          </java>
        </try>

        <catch>
          <echo>Failed to generate Java code from ${manualfileshort}.ump</echo>
          <if>
            <equals arg1="${failfast}" arg2="true" />
            <then>
              <fail message="Failed to generate Java code from ${manualfileshort}.ump"/>
            </then>
          </if>
        </catch>
      </trycatch>

      <!-- Compile the resulting Java if OK to do so -->
      <if>
        <not>
          <equals arg1="${forcecompile}" arg2="true" />
        </not>
        <then>
          <if>
            <resourcecontains resource="${manualFile}" substring="@@@skipcompile" />
            <then>
              <echo>Skipping Java compile due to presence of @@@skipcompile</echo>
              <var name="okToCompileJava" value="false" />
            </then>
          </if>

          <if>
            <resourcecontains resource="${manualFile}" substring="@@@skipjavacompile" />
            <then>
              <echo>Skipping Java compile due to presence of @@@skipjavacompile</echo>
              <var name="okToCompileJava" value="false" />
            </then>
          </if>
        </then>
      </if>
      <if>
        <equals arg1="${okToCompileJava}" arg2="true" />
        <then>
          <mkdir dir="${java.path}/bin/${manualfileshort}" />
          <trycatch>
            <try>
              <javac debug="true" includeantruntime="false" debuglevel="source,lines,vars" destdir="${java.path}/bin/${manualfileshort}" source="1.7" target="1.7">
                <src path="${java.path}/src-gen-umple/${manualfileshort}"/>
              </javac>
              <echo>Successfully compiled java code generated from ${manualfileshort}.ump</echo>
            </try>

            <catch>
              <echo>Failed to compile Java code generated from ${manualfileshort}.ump</echo>
              <if>
                <equals arg1="${failfast}" arg2="true" />
                <then>
                  <fail message="Failed to compile Java code generated from ${manualfileshort}.ump"/>
                </then>
              </if>
            </catch>
          </trycatch>
        </then>
      </if>
    </sequential>
  </target> <!-- END OF JAVA TARGETS -->

  <!-- Targets to generate and compile c++ -->

  <target name="doCpp" unless="mode.notcpp">

    <echo>Generating and compiling Cpp</echo>

    <fileset dir="${cpp.path}" includes="*.ump" id="cpp.ump.files">
      <!-- Special cases - temporary until error detection-->
      <exclude name="E0*.ump" />
      <exclude name="E1*.ump" />
      <exclude name="E2*.ump" />
      <exclude name="WE1xxIdentifierInvalid1.ump" />
      <exclude name="WE1xxIdentifierInvalid3.ump" />
      <exclude name="WE1xxIdentifierInvalid5.ump" />
      <exclude name="WE1xxIdentifierInvalid6.ump" />
      <exclude name="WE1xxIdentifierInvalid7.ump" />
      <!-- This fails to compile because they are incomplete examples of umple -->
      <exclude name="UseStatements1.ump" />
    </fileset>     

    <pathconvert pathsep="," property="cpp.ump.file.list" refid="cpp.ump.files"/>

    <echo>@@@PUT CPP OUTPUTS HERE@@@</echo>
    <record name="${fulllogfile}" action="stop" />
    
    <for list="${cpp.ump.file.list}" delimiter="," param="umpFile" parallel="true" threadcount="${threadcount}" keepgoing="${failsafe}">
      <sequential>
        <ant antfile="${ant.file}" output="@{umpFile}.output" target="generateAndCompileCpp">
          <property name="manualFile" value="@{umpFile}" />
        </ant> 
      </sequential>
    </for>

    <record name="${fulllogfile}" action="start" />
  </target>

  <target name="generateAndCompileCpp">
    <sequential>
      <basename file="${manualFile}" property="manualfileshort" suffix="ump" />
      <property name="fullump" value="${manualumpfiles.path}/${manualfileshort}.ump" />
      <var name="okToCompileCpp" value="true"/>

      <echo>Will test ${manualFile} </echo>
      
      <!-- Compile in umple to Cpp -->
      <trycatch>
        <try>
          <java jar="${dist.dir}/${dist.umple.jar}" fork="true" failonerror="true" dir="${cpp.path}">
            <arg value="-g" />
            <arg value="RTCpp" />
            <arg value="--path" />
            <arg value="src-gen-umple/${manualfileshort}" />
            <arg value="${manualfileshort}.ump" />
          </java>
        </try>

        <catch>
          <echo>Failed to generate C++ code from ${manualfileshort}.ump</echo>
          <if>
            <equals arg1="${failfast}" arg2="true" />
            <then>
              <fail message="Failed to generate C++ code from ${manualfileshort}.ump" />
            </then>
          </if>
        </catch>
      </trycatch>

      <!-- Compile the resulting Cpp if OK to do so -->
      <if>
        <not>
          <equals arg1="${forcecompile}" arg2="true" />
        </not>
        <then>
          <if>
            <resourcecontains resource="${manualFile}" substring="@@@skipcompile" />
            <then>
              <echo>Skipping C++ compile due to presence of @@@skipcompile</echo>
              <var name="okToCompileCpp" value="false" />
            </then>
          </if>

          <if>
            <resourcecontains resource="${manualFile}" substring="@@@skipcppcompile" />
            <then>
              <echo>Skipping C++ compile due to presence of @@@skipcppcompile</echo>
              <var name="okToCompileCpp" value="false" />
            </then>
          </if>
        </then>
      </if>
      <if>
        <equals arg1="${okToCompileCpp}" arg2="true" />
        <then>
          <mkdir dir="${cpp.path}/bin/${manualfileshort}"  />
          <exec executable="g++" dir="${cpp.path}/src-gen-umple/${manualfileshort}" outputproperty="cpp.out.log" errorproperty="cpp.error.log">
            <arg value="-o" />
            <arg file="${cpp.path}/bin/${manualfileshort}/output.o" /> <!-- TODO change output type to allow for execution -->
            <arg value="-I" />
            <arg file="${cpp.path}/src-gen-umple/${manualfileshort}" />
            <!--<arg value="-std=gnu++11" />-->
            <arg value="-fpermissive" />
            <arg value="-w" />
            <arg value="${manualfileshort}_Main.cpp" />
          </exec>

          <available file="${cpp.path}/bin/${manualfileshort}/output.o" property="object.file.found" />

          <if>
            <equals arg1="${object.file.found}" arg2="true" />
            <then>
              <echo>Compiled ${manualfileshort}_Main.cpp successfully</echo>
            </then>

            <else>
              <echo>C++ compilation failed on ${manualfileshort}_Main.cpp: ${cpp.error.log}</echo>
              <if>
                <equals arg1="${failfast}" arg2="true" />
                <then>
                  <fail message="C++ compilation failed on ${manualfileshort}_Main.cpp"/>
                </then>
              </if>
            </else>
          </if>
        </then>
      </if>
    </sequential>
  </target> <!-- END OF CPP TARGETS -->

  <!-- Targets to generate and compile php-->

  <target name="doPhp" unless="mode.notphp">

    <echo>Generating and compiling Php</echo>

    <fileset dir="${php.path}" includes="*.ump" id="php.ump.files">
      <!-- Special cases - temporary until error detection-->
      <exclude name="E0*.ump" />
      <exclude name="E1*.ump" />
      <exclude name="E2*.ump" />
      <exclude name="WE1xxIdentifierInvalid1.ump" />
      <exclude name="WE1xxIdentifierInvalid3.ump" />
      <exclude name="WE1xxIdentifierInvalid5.ump" />
      <exclude name="WE1xxIdentifierInvalid6.ump" />
      <exclude name="WE1xxIdentifierInvalid7.ump" />
      <!-- This fails to compile because they are incomplete examples of umple -->
      <exclude name="UseStatements1.ump" />
      <!-- This fails to compile because it relies on Java API logger -->
      <exclude name="Tracers2.ump" />
      <!-- These fail to compile because PHP has no log4j tracer -->
      <exclude name="Tracers3.ump" />
      <exclude name="Tracers4.ump" />
      <!-- This fails to compile because PHP has no LTTNG tracer -->
      <exclude name="Tracers5.ump" />
    </fileset> 

    <pathconvert pathsep="," property="php.ump.file.list" refid="php.ump.files"/>

    <echo>@@@PUT PHP OUTPUTS HERE@@@</echo>
    <record name="${fulllogfile}" action="stop" />
    
    <for list="${php.ump.file.list}" delimiter="," param="umpFile" parallel="true" threadCount="${threadcount}" keepgoing="${failsafe}"> 
      <sequential>
        <ant antfile="${ant.file}" output="@{umpFile}.output" target="generateAndCompilePhp">
          <property name="manualFile" value="@{umpFile}" />
        </ant> 
        <if>
          <resourcecontains resource="@{umpFile}.output" substring="PHP compilation failed"/>
          <then>
            <fail message="PHP compilation failure with example @{umpFile}"/>
          </then>
        </if>
      </sequential>
    </for>    
    <record name="${fulllogfile}" action="start" />
  </target>

  <target name="generateAndCompilePhp">
    <sequential>
      <basename file="${manualFile}" property="manualfileshort" suffix="ump" />
      <property name="fullump" value="${manualumpfiles.path}/${manualfileshort}.ump" />
      <var name="okToCompilePhp" value="true" />

      <echo>Will test ${manualFile} </echo>
      
      <!-- Compile in umple to Php -->
      <trycatch>
        <try>
          <java jar="${dist.dir}/${dist.umple.jar}" fork="true" failonerror="true" dir="${php.path}">
            <arg value="-g" />
            <arg value="Php" />
            <arg value="--path" />
            <arg value="src-gen-umple/${manualfileshort}" />
            <arg value="${manualfileshort}.ump" />
          </java>
        </try>

        <catch>
          <echo>Failed to generate PHP code from ${manualfileshort}.ump</echo>
          <if>
            <equals arg1="${failfast}" arg2="true" />
            <then>
              <fail message="Failed to generate PHP code from ${manualfileshort}.ump"/>
            </then>
          </if>
        </catch>
      </trycatch>

      <!-- Compile the resulting Php if OK to do so -->
      <if>
        <not>
          <equals arg1="${forcecompile}" arg2="true" />
        </not>
        <then>
          <if>
            <resourcecontains resource="${manualFile}" substring="@@@skipcompile" />
            <then>
              <echo>Skipping Php lint due to presence of @@@skipcompile</echo>
              <var name="okToCompilePhp" value="false" />
            </then>
          </if>

          <if>
            <resourcecontains resource="${manualFile}" substring="@@@skipphpcompile" />
            <then>
              <echo>Skipping Php lint due to presence of @@@skipphpcompile</echo>
              <var name="okToCompilePhp" value="false" />
            </then>
          </if>
        </then>
      </if>
      <if>
        <equals arg1="${okToCompilePhp}" arg2="true" />
        <then>
          <fileset dir="${php.path}/src-gen-umple/${manualfileshort}" id="php.files">
            <include name="*.php"/>
          </fileset>
          <pathconvert pathsep="," property="file.list" refid="php.files"/>
          <for list="${file.list}" delimiter="," param="phpFile">
            <sequential>
              <trycatch>
                <try>
                  <exec executable="php" failonerror="true">
                    <arg value="-l" />
                    <arg value="-e" />
                    <arg file="@{phpFile}" />
                  </exec>
                </try>

                <catch>
                  <echo>PHP compilation failed on files generated from ${manualfileshort}.ump</echo>
                  <if>
                    <equals arg1="${failfast}" arg2="true" />
                    <then>
                      <fail message="PHP compilation failed on files generated from ${manualfileshort}.ump" />
                    </then>
                  </if>
                </catch>
              </trycatch>
            </sequential>
          </for>
        </then>
      </if>
    </sequential>
  </target> <!-- END OF PHP TARGETS -->

  <!-- Targets to generate and compile ruby-->

  <target name="doRuby" unless="mode.notruby">

    <echo>Generating and compiling Ruby</echo>

    <fileset dir="${ruby.path}" includes="*.ump" id="ruby.ump.files">
      <!-- Special cases - temporary until error detection-->
      <exclude name="E0*.ump" />
      <exclude name="E1*.ump" />
      <exclude name="E2*.ump" />
      <exclude name="WE1xxIdentifierInvalid1.ump" />
      <exclude name="WE1xxIdentifierInvalid3.ump" />
      <exclude name="WE1xxIdentifierInvalid5.ump" />
      <exclude name="WE1xxIdentifierInvalid6.ump" />
      <exclude name="WE1xxIdentifierInvalid7.ump" />
      <!-- This fails to compile because they are incomplete examples of umple -->
      <exclude name="UseStatements1.ump" />
    </fileset> 

    <pathconvert pathsep="," property="ruby.ump.file.list" refid="ruby.ump.files"/>

    <echo>@@@PUT RUBY OUTPUTS HERE@@@</echo>
    <record name="${fulllogfile}" action="stop" />
    
    <for list="${ruby.ump.file.list}" delimiter="," param="umpFile" parallel="true" threadCount="${threadcount}" keepgoing="${failsafe}"> 
      <sequential>
        <ant antfile="${ant.file}" output="@{umpFile}.output" target="generateAndCompileRuby">
          <property name="manualFile" value="@{umpFile}" />
        </ant> 
        <if>
          <resourcecontains resource="@{umpFile}.output" substring="Ruby compilation failed"/>
          <then>
            <fail message="Ruby compilation failure with example @{umpFile}"/>
          </then>
        </if>
      </sequential>
    </for>    
    <record name="${fulllogfile}" action="start" />
  </target>

  <target name="generateAndCompileRuby">
    <sequential>
      <basename file="${manualFile}" property="manualfileshort" suffix="ump" />
      <property name="fullump" value="${manualumpfiles.path}/${manualfileshort}.ump" />
      <var name="okToCompileRuby" value="true" />

      <echo>Will test ${manualFile} </echo>
      
      <!-- Compile in umple to Ruby -->
      <trycatch>
        <try>
          <java jar="${dist.dir}/${dist.umple.jar}" fork="true" failonerror="true" dir="${ruby.path}">
            <arg value="-g" />
            <arg value="Ruby" />
            <arg value="--path" />
            <arg value="src-gen-umple/${manualfileshort}" />
            <arg value="${manualfileshort}.ump" />
          </java>
        </try>

        <catch>
          <echo>Failed to generate Ruby code from ${manualfileshort}.ump</echo>
          <if>
            <equals arg1="${failfast}" arg2="true" />
            <then>
              <fail message="Failed to generate Ruby code from ${manualfileshort}.ump"/>
            </then>
          </if>
        </catch>
      </trycatch>

      <!-- Compile the resulting Ruby if OK to do so -->
      <if>
        <not>
          <equals arg1="${forcecompile}" arg2="true" />
        </not>
        <then>
          <if>
            <resourcecontains resource="${manualFile}" substring="@@@skipcompile" />
            <then>
              <echo>Skipping Ruby lint due to presence of @@@skipcompile</echo>
              <var name="okToCompileRuby" value="false" />
            </then>
          </if>

          <if>
            <resourcecontains resource="${manualFile}" substring="@@@skiprubycompile" />
            <then>
              <echo>Skipping Ruby lint due to presence of @@@skiprubycompile</echo>
              <var name="okToCompileRuby" value="false" />
            </then>
          </if>
        </then>
      </if>
      <if>
        <equals arg1="${okToCompileRuby}" arg2="true" />
        <then>
          <fileset dir="${ruby.path}/src-gen-umple/${manualfileshort}" id="ruby.files">
            <include name="*.ruby"/>
          </fileset>
          <pathconvert pathsep="," property="file.list" refid="ruby.files"/>
          <for list="${file.list}" delimiter="," param="rubyFile">
            <sequential>
              <trycatch>
                <try>
                  <exec executable="ruby" failonerror="true">
                    <arg value="-c" />
                    <arg value="-w" />
                    <arg file="@{rubyFile}" />
                  </exec>
                </try>

                <catch>
                  <echo>Ruby compilation failed on files generated from ${manualfileshort}.ump</echo>
                  <if>
                    <equals arg1="${failfast}" arg2="true" />
                    <then>
                      <fail message="Ruby compilation failed on files generated from ${manualfileshort}.ump" />
                    </then>
                  </if>
                </catch>
              </trycatch>
            </sequential>
          </for>
        </then>
      </if>
    </sequential>
  </target> <!-- END OF RUBY TARGETS -->

  <!-- Setup and teardown targets -->

  <target name="testSetup">
    <mkdir dir="${project.output.path}" />

    <if>
      <equals arg1="${failfast}" arg2="true" />
      <then>
        <property name="failsafe" value="false" />
      </then>

      <else>
        <property name="failsafe" value="true" />
      </else>
    </if>
    <if>
      <not>
        <equals arg1="${mode.notjava}" arg2="false" />
      </not>
      <then>
        <mkdir dir="${java.path}" />
        <mkdir dir="${java.path}/src-gen-umple" />
        <mkdir dir="${java.path}/bin" />
        <exec executable="ruby">
          <arg value="build/get_testable_examples.rb" />
          <arg value="-i" />
          <arg value="${manualumpfiles.path}" />
          <arg value="-i" />
          <arg value="${exampleumpfiles.path}" />
          <arg value="-o" />
          <arg value="${java.path}" />
          <arg value="-l" />
          <arg value="java" />
          <arg value="-s" />
          <arg value="${examplepattern}" />
        </exec>
      </then>
    </if>

    <if>
      <not>
        <equals arg1="${mode.notcpp}" arg2="false" />
      </not>
      <then>
        <mkdir dir="${cpp.path}" />
        <mkdir dir="${cpp.path}/src-gen-umple" />
        <mkdir dir="${cpp.path}/bin" />
        <exec executable="ruby">
          <arg value="build/get_testable_examples.rb" />
          <arg value="-i" />
          <arg value="${manualumpfiles.path}" />
          <arg value="-i" />
          <arg value="${exampleumpfiles.path}" />
          <arg value="-o" />
          <arg value="${cpp.path}" />
          <arg value="-l" />
          <arg value="cpp" />
          <arg value="-s" />
          <arg value="${examplepattern}" />
        </exec>
      </then>
    </if>

    <if>
      <not>
        <equals arg1="${mode.notphp}" arg2="false" />
      </not>
      <then>
        <mkdir dir="${php.path}" />
        <mkdir dir="${php.path}/src-gen-umple" />
        <exec executable="ruby">
          <arg value="build/get_testable_examples.rb" />
          <arg value="-i" />
          <arg value="${manualumpfiles.path}" />
          <arg value="-i" />
          <arg value="${exampleumpfiles.path}" />
          <arg value="-o" />
          <arg value="${php.path}" />
          <arg value="-l" />
          <arg value="php" />
          <arg value="-s" />
          <arg value="${examplepattern}" />
        </exec>
      </then>
    </if>

    <if>
      <not>
        <equals arg1="${mode.notruby}" arg2="false" />
      </not>
      <then>
        <mkdir dir="${ruby.path}" />
        <mkdir dir="${ruby.path}/src-gen-umple" />
        <exec executable="ruby">
          <arg value="build/get_testable_examples.rb" />
          <arg value="-i" />
          <arg value="${manualumpfiles.path}" />
          <arg value="-i" />
          <arg value="${exampleumpfiles.path}" />
          <arg value="-o" />
          <arg value="${ruby.path}" />
          <arg value="-l" />
          <arg value="ruby" />
          <arg value="-s" />
          <arg value="${examplepattern}" />
        </exec>
      </then>
    </if>
  </target>

  <target name="deleteTempFolders">
    <delete dir="${project.output.path}" failonerror="false" />
  </target>

  <target name="startLog">
    <property name="fulllogfile" location="build/${logfile}" />
    <touch file="${fulllogfile}" />
    <record name="${fulllogfile}" action="start" loglevel="info" />
  </target>

  <target name="finishLog">
    <exec executable="ruby">
      <arg value="build/parallel_output_builder.rb" />
      <arg value="${fulllogfile}"/>
      <arg value="${project.output.path}"/>
    </exec>
  </target>

  <target name="checkRuby">
    <condition property="mode.notruby">
      <isfalse value="${allowruby}" />
    </condition>
    <echo>NotRuby: ${mode.notruby}</echo>
  </target>
</project>