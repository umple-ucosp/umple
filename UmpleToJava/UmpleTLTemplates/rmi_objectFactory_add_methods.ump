
class UmpleToJava {
  rmi_objectFactory_add_methods <<!<</*rmi_objectFactory_add_methods*/>><<#
  append(realSb,"\n  {0} {1}({2}int component{3} proxy)",new Object[] {accessibility, "add"+uClass.getName(), arguments+argumentscomma,", "+uClass.getName()});
  if(isInterface==true){
  #>>;<<#
  }
  else{
  #>>
  {
    return remoteFactories.get(component).create<<=uClass.getName()>>(<<=gClass.getLookup("constructorSignature_caller")>><<=argumentscomma>>proxy);
  }
  <<#
  }
  append(realSb,"\n  {0} {1}({2}String component{3} proxy)",new Object[] {accessibility, "add"+uClass.getName(), arguments+argumentscomma, ", "+uClass.getName()});
  if(isInterface==true){
  #>>;<<#
  }
  else{
  #>>
  {
   return add<<=uClass.getName()>>(<<=gClass.getLookup("constructorSignature_caller")+argumentscomma>>getComponentId(component),proxy);
  }
    <<#
    }
  append(realSb,"\n  {0} {1}({2}{3} proxy)",new Object[] {accessibility, "create"+uClass.getName(), arguments,argumentscomma+uClass.getName()});
  if(isInterface==true){
  #>>;<<#
  }
  else{
#>>
  {
  <<=uClass.getName()>>Impl object = new <<=uClass.getName()>>Impl(<<=gClass.getLookup("constructorSignature_caller")>>);
  object.setRealSelf(proxy);
  object.startRMI();
  listOf<<=uClass.getName()>>.add(object);
  return object;
  }
  <<#
    }#>>!>>
}
